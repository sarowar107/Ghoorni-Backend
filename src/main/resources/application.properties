spring.application.name=ghoorni

# Bind to Render's dynamic port or default to 8080 locally
server.port=${PORT:8080}

# DataSource (read from environment variables in Render).
# On Render set SPRING_DATASOURCE_URL, SPRING_DATASOURCE_USERNAME and SPRING_DATASOURCE_PASSWORD
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3306/ghoorni?useSSL=false&serverTimezone=UTC}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:root}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:root}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Hibernate / JPA
# Allow overriding these from environment if needed
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HBM2DDL:update}
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL:true}
spring.jpa.properties.hibernate.dialect=${HIBERNATE_DIALECT:org.hibernate.dialect.MySQL8Dialect}

# File storage configuration
file.upload-dir=resources/uploads
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# When deploying to Render ensure the DB is reachable. If you don't want the app to fail
# startup when a DB is not yet available, consider using a retry/wait script or a managed
# Render database and set the environment variables accordingly.